3. Load Balancing
Critical in distributed/cloud systems.

✅ Topics to Learn:
What is Load Balancing

Load balancing is a network management technique that distributes network traffic across multiple servers to improve performance, availability, and resource utilization. It ensures that no single server is overwhelmed, preventing slowdowns or downtime during peak periods or unexpected traffic spikes. 
Here's a more detailed explanation:
Distributing Traffic:
A load balancer acts as a traffic controller, receiving incoming requests and directing them to different servers in a cluster. 
Improving Performance:
By spreading the workload, load balancing reduces the load on individual servers, allowing them to handle requests more efficiently, leading to faster response times. 
Enhancing Availability:
If one server in the cluster fails, the load balancer can automatically direct traffic to other healthy servers, ensuring continuous service availability. 
Optimizing Resource Utilization:
Load balancing helps maximize the use of available resources, preventing servers from being underutilized or overloaded, leading to cost savings and improved efficiency. 
Example:
Imagine a popular website experiencing a surge in traffic. A load balancer would distribute the incoming requests across multiple web servers, preventing any one server from being overwhelmed and causing the website to slow down or go offline. 
Load Balancing Algorithms:
Load balancers utilize various algorithms to determine which server receives a request. Common algorithms include round-robin, least connections, and geo-distributed load balancing. 

№###########$$$$$$$
Types:

Layer 4 (Transport): Based on IP and port

Layer 7 (Application): Based on HTTP content
****************"" "" "
Algorithms: Round-robin, Least Connections, IP Hash

Round-robin, Least Connections, and IP Hash are load balancing algorithms used to distribute network traffic across multiple servers. Round-robin distributes requests sequentially, while Least Connections directs requests to servers with the fewest active connections, and IP Hash sends requests from the same client to the same server. 
Round-robin:
Mechanism: Distributes requests in a rotating sequence, like passing out tickets. 
Pros: Simple, easy to implement, and provides a basic level of load distribution. 
Cons: Can lead to uneven load if servers have varying capabilities or encounter issues, and doesn't consider session affinity. 
Least Connections:
Mechanism: Prioritizes servers with the fewest active connections. 
Pros: Helps prevent overload on individual servers and distributes load more dynamically. 
Cons: Can still lead to imbalances if connections are not evenly distributed across all servers, and may not be ideal for scenarios requiring strict session persistence. 
IP Hash:
Mechanism:
Assigns clients to specific servers based on their IP address, ensuring they remain on the same server for the duration of their session. 
Pros:
Useful for maintaining session affinity and preventing clients from getting bounced around between servers. 
Cons:
Can create hot spots if some IP addresses map to the same server, and requires a hash function to map IP addresses to servers. 
In essence, each algorithm has its own strengths and weaknesses. Round-robin is simple but not very intelligent. Least Connections is dynamic but can still be unbalanced. IP Hash is helpful for session persistence but might cause hotspots, according to 30 Days Coding. The choice of which algorithm to use depends on the specific needs of the application and the traffic patterns it experiences, according to Cloudflare. 

@@@@@@@@@####*******"" "" "

Sticky Sessions

Health Checks

SSL Termination

Popular Tools: HAProxy, NGINX, AWS ELB, Traefik